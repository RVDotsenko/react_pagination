{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","pages/query.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","classNames","require","Pagination","totalItems","perPage","currentPage","onPageChange","items","map","pagesCount","Math","ceil","length","pages","fromItem","toItem","prevClass","disabled","nextClass","className","onClick","event","value","target","textContent","href","index","liClass","active","showOptions","Query","useSearchParams","searchParams","castomPage","get","castomItemsShow","includes","sort","a","b","useState","showItems","setShowItems","setCurrentPage","id","onChange","defaultValue","option","htmlFor","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29338233.chunk.js","sourcesContent":["// import { useState } from \"react\";\n\nexport function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n\n// export const [showItems, setShowItems] = useState(5);\n// export const [currentPage, setCuttentPage] = useState(1);\n","import React, { MouseEvent } from 'react';\nimport { getNumbers } from '../../utils';\n// eslint-disable-next-line\nconst classNames = require('classnames');\n\ntype Props = {\n  totalItems: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (value: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  totalItems,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const items = getNumbers(1, totalItems)\n    .map(n => `Item ${n}`);\n\n  const pagesCount = Math.ceil(items.length / perPage);\n  const pages = getNumbers(1, pagesCount);\n  const fromItem = currentPage * perPage - perPage + 1;\n  const toItem = (currentPage * perPage) > totalItems\n    ? totalItems\n    : currentPage * perPage;\n\n  const handlePageSelector = (event: MouseEvent<HTMLElement>) => {\n    const value = (event.target as HTMLElement).textContent;\n\n    if (value) {\n      switch (value) {\n        case '«':\n          // eslint-disable-next-line\n          currentPage > 1\n            ? onPageChange(currentPage - 1)\n            : '';\n          break;\n\n        case '»':\n          // eslint-disable-next-line\n          currentPage < pagesCount\n            ? onPageChange(currentPage + 1)\n            : '';\n          break;\n\n        default:\n          onPageChange(+value);\n          break;\n      }\n    }\n  };\n\n  const prevClass = classNames({\n    'page-item': true,\n    disabled: currentPage === 1,\n  });\n\n  const nextClass = classNames({\n    'page-item': true,\n    disabled: currentPage === pagesCount,\n  });\n\n  return (\n    <>\n      {/* eslint-disable-next-line */}\n      <ul\n        className=\"pagination\"\n        // eslint-disable-next-line\n        onClick={handlePageSelector}\n      >\n\n        <li className={prevClass}>\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n          >\n            «\n          </a>\n        </li>\n        {pages.map((index) => {\n          const liClass = classNames({\n            'page-item': true,\n            active: currentPage === index,\n          });\n\n          return (\n            <li className={liClass} key={index}>\n              <a data-cy=\"pageLink\" className=\"page-link\" href={`#${index}`}>\n                {index}\n              </a>\n            </li>\n          );\n        })}\n\n        <li className={nextClass}>\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === pagesCount}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {items.map((n, index: number) => {\n          if (index >= fromItem - 1 && index <= toItem - 1) {\n            return (<li data-cy=\"item\" key={n}>{n}</li>);\n          }\n\n          return '';\n        })}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  useSearchParams,\n} from 'react-router-dom';\n\nimport { Pagination } from '../components/Pagination';\n\nconst totalItems = 42;\nconst showOptions = [3, 5, 10, 20];\n\nexport const Query: React.FC = () => {\n  const [searchParams] = useSearchParams();\n\n  let castomPage = searchParams.get('page') || 1;\n  let castomItemsShow = searchParams.get('perPage') || 5;\n\n  if (!showOptions.includes(+castomItemsShow)) {\n    showOptions.push(+castomItemsShow);\n    showOptions.sort((a, b) => a - b);\n  } else {\n    castomPage = 1;\n    castomItemsShow = 5;\n  }\n\n  const [showItems, setShowItems] = useState(+castomItemsShow);\n  const [currentPage, setCurrentPage] = useState(+castomPage);\n\n  const fromItem = currentPage * showItems - showItems + 1;\n  const toItem = (currentPage * showItems) > totalItems\n    ? totalItems\n    : currentPage * showItems;\n\n  const handleItemsSelector = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setShowItems(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Items with Pagination</h1>\n\n        <p className=\"lead\" data-cy=\"info\">\n          {`Page ${currentPage} (items ${fromItem} - ${toItem} of ${totalItems})`}\n        </p>\n\n        <div className=\"form-group row\">\n          <div className=\"col-3 col-sm-2 col-xl-1\">\n            <select\n              data-cy=\"perPageSelector\"\n              id=\"perPageSelector\"\n              className=\"form-control\"\n              onChange={handleItemsSelector}\n              defaultValue={showItems}\n            >\n              {showOptions\n                .map(option => (\n                  <option\n                    value={option}\n                    key={option}\n                  >\n                    {option}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n            items per page\n          </label>\n        </div>\n\n        <Pagination\n          totalItems={totalItems}\n          perPage={showItems}\n          currentPage={currentPage}\n          onPageChange={(value: number) => setCurrentPage(value)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Query;\n","import {\n  BrowserRouter,\n  Routes,\n  Route,\n} from 'react-router-dom';\nimport './App.css';\n\nimport { Query } from './pages/query';\n\nexport const App = () => (\n  <BrowserRouter>\n    <>\n      <Routes>\n        <Route path=\"/\" element={<Query />} />\n      </Routes>\n    </>\n  </BrowserRouter>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}